#!/bin/zsh
# GitHub codespaces setup.

exec > >(tee -i $HOME/dotfiles_install.log)
exec 2>&1
set -x

function link_files() {
  # In some codespaces, there's no need to symlink dotfiles to $HOME
  if [[ ! $(pwd) -ef $HOME ]]; then
    mkdir -p ~/.local/bin
    mkdir -p ~/.config/
    ln -s $(pwd)/.config/nvim ~/.config/
    ln -s $(pwd)/.config/lawn ~/.config/
    ln -s $(pwd)/.gitignore_global ~/.gitignore_global
    ln -s $(pwd)/.git_template ~/.git_template
    ln -s $(pwd)/.tmux.conf ~/.tmux.conf
    ln -s $(pwd)/bin ~/bin
    ln -s $(pwd)/script/git-hooks/pre-push .git/hooks/pre-push

    rm -f ~/.gitconfig
    ln -s $(pwd)/.gitconfig ~/.gitconfig
    touch ~/.gitconfig-macos # create empty config file

    if [ -d "/workspaces/github/bin" ]; then
      sudo ln -s /workspaces/github/bin/rubocop /usr/local/bin/rubocop
      sudo ln -s /workspaces/github/bin/srb /usr/local/bin/srb
      sudo ln -s /workspaces/github/bin/solargraph /usr/local/bin/solargraph
    fi
  fi
}

brew_path=/home/linuxbrew/.linuxbrew # avoid brew command not found in codespaces

function install_rust_and_cargo() {
  if command -v rustc >/dev/null 2>&1 && command -v cargo >/dev/null 2>&1; then
    echo "Rust and Cargo are already installed."
    echo "$(which cargo)"
  else
    echo "Installing Rust and Cargo..."
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    echo "Rust and Cargo installation complete."
    echo "$HOME/.cargo/bin/cargo"
  fi
}

function install_neovim() {
  if ! command -v nvim &> /dev/null; then
    previous=$(pwd)
    echo "Neovim not found, installing..."
    cd ~/bin
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage
    if ./nvim.appimage --version >& /dev/null; then
      sudo ln -s ./nvim.appimage nvim
    else
      ./nvim.appimage --appimage-extract
      sudo mv squashfs-root /
      sudo ln -s /squashfs-root/AppRun ~/bin/nvim
      rm nvim.appimage
    fi
    cd $previous
    echo "$HOME/bin/nvim"
  else
    echo "Neovim already installed, skipping..."
    if nvim_path=$(command -v nvim); then
      echo $nvim_path
    else
      echo "$brew_path/bin/nvim"
    fi
  fi
}

function setup_neovim {
  nvim_path=$1

  # Install Neovim plugins
  sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  $nvim_path --headless +PlugInstall +qa

  # Hack for telescope-fzf-native, which doesn't make in codespaces for some reason
  find /workspaces/ -name 'telescope-fzf-native.nvim' -type d | xargs bash -c 'cd "$0" && make'

  # Accept Copilot license
  mkdir -p ~/.config/github-copilot
  echo '{"luanzeba":{"version":"2021-10-14"}}' > ~/.config/github-copilot/terms.json
  $nvim_path --headless +"Copilot setup" +qa
}

function install_software() {
  curl -sL https://deb.nodesource.com/setup_16.x | sudo bash -
  sudo apt-get install -y nodejs
  curl https://github.com/dandavison/delta/releases/download/0.13.0/git-delta_0.13.0_amd64.deb > ~/git-delta.deb
  sudo dpkg -i ~/git-delta_0.13.0_amd64.deb
  sudo npm install -g typescript-language-server typescript vscode-langservers-extracted eslint_d
  sudo apt -o DPkg::Lock::Timeout=600 install build-essential python3-venv ruby-dev fzf bat exa jq ripgrep tmux libfuse2 fuse software-properties-common -y
  # install_homebrew
  cargo_path=$(install_rust_and_cargo | tail -n 1)
  $cargo_path install --root ~ lawn
  nvim_path=$(install_neovim | tail -n 1)
  setup_neovim $nvim_path
}

function setup_software() {
  # Setup codespace friendly name for shell prompt
  codespace_friendly_name=$(gh api "/user/codespaces/$CODESPACE_NAME" -q .display_name)
  if [[ $? -eq 0 && $codespace_friendly_name != *"Not Found"* ]]; then
    echo $codespace_friendly_name >> $HOME/.friendly_name
  fi

  # Remote development with https://github.com/bk2204/lawn/
  mkdir -p ~/mnt/lawn

  # Use remote-development-manager for copy/paste and open support
  wget https://github.com/BlakeWilliams/remote-development-manager/releases/download/v0.0.3/rdm-linux-amd64
  sudo mv rdm-linux-amd64 /usr/bin/rdm
  chmod +x /usr/bin/rdm
  gh config set browser "rdm open"

  sudo chsh -s /bin/zsh $(whoami)
  zsh zsh/install.zsh
}

echo 'ðŸ”— Linking files.'
echo `date +"%Y-%m-%d %T"`
link_files

echo 'ðŸ’½ Installing software'
echo `date +"%Y-%m-%d %T"`
install_software

echo 'ðŸ§° Configuring software'
echo `date +"%Y-%m-%d %T"`
setup_software
echo 'âœ… Done!'
echo `date +"%Y-%m-%d %T"`
