#!/bin/bash
# GitHub codespaces setup.

exec > >(tee -i $HOME/dotfiles_install.log)
exec 2>&1
set -x

function link_files() {
  # In some codespaces, there's no need to symlink dotfiles to $HOME
  if [[ ! $(pwd) -ef $HOME ]]; then
    mkdir -p ~/.config/
    ln -s $(pwd)/.config/nvim ~/.config/
    ln -s $(pwd)/.gitignore_global ~/.gitignore_global
    ln -s $(pwd)/.git_template ~/.git_template
    ln -s $(pwd)/.tmux.conf ~/.tmux.conf
    ln -s $(pwd)/bin ~/.bin
    ln -s $(pwd)/.config/fish ~/.config/
    ln -s $(pwd)/script/git-hooks/pre-push .git/hooks/pre-push

    rm -f ~/.gitconfig
    ln -s $(pwd)/.gitconfig ~/.gitconfig
    touch ~/.gitconfig-macos # create empty config file

    if [ -d "/workspaces/github/bin" ]; then
      sudo ln -s /workspaces/github/bin/rubocop /usr/local/bin/rubocop
      sudo ln -s /workspaces/github/bin/srb /usr/local/bin/srb
      sudo ln -s /workspaces/github/bin/solargraph /usr/local/bin/solargraph
    fi
  fi
}

brew_path=/home/linuxbrew/.linuxbrew # avoid brew command not found in codespaces
function install_homebrew() {
  if [[ ! -d "${brew_path}" ]]; then
    echo "🍺 Homebrew not found, installing..."
    export HOMEBREW_INSTALL_FROM_API=true # Don't fully clone homebrew. Provides a speed boost.
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    test -r ~/.bash_profile && echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bash_profile
    echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.profile
  else
    echo "🍺 Homebrew already installed, skipping..."
  fi
}

function install_neovim() {
  if ! command -v nvim &> /dev/null; then
    previous=$(pwd)
    echo "Neovim not found, installing..."
    cd /usr/bin
    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage
    if ./nvim.appimage --version >& /dev/null; then
      sudo ln -s ./nvim.appimage nvim
    else
      ./nvim.appimage --appimage-extract
      sudo mv squashfs-root /
      sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
      rm nvim.appimage
    fi
    cd $previous
  else
    echo "Neovim already installed, skipping..."
  fi
}

function install_software() {
  curl -sL https://deb.nodesource.com/setup_16.x | sudo bash -
  sudo apt-get install -y nodejs
  curl https://github.com/dandavison/delta/releases/download/0.13.0/git-delta_0.13.0_amd64.deb > ~/git-delta.deb
  sudo dpkg -i ~/git-delta_0.13.0_amd64.deb
  sudo npm install -g typescript-language-server typescript vscode-langservers-extracted eslint_d
  sudo apt -o DPkg::Lock::Timeout=600 install build-essential python3-venv ruby-dev fzf bat exa jq ripgrep thefuck tmux libfuse2 fuse software-properties-common -y
  install_homebrew
  which fish || $brew_path/bin/brew install fish
  install_neovim
}

function setup_software() {
  # Use remote-development-manager for copy/paste and open support
  wget https://github.com/BlakeWilliams/remote-development-manager/releases/download/v0.0.3/rdm-linux-amd64
  sudo mv rdm-linux-amd64 /usr/bin/rdm
  chmod +x /usr/bin/rdm
  gh config set browser "rdm open"

  # Depending on the codespace, neovim may not be in the path
  if command -v nvim &> /dev/null; then
    nvim_path=$(command -v nvim)
  else
    nvim_path="$brew_path/bin/nvim"
  fi

  # Install Neovim plugins
  sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  $nvim_path --headless +PlugInstall +qa

  # Accept Copilot license
  mkdir -p ~/.config/github-copilot
  echo '{"luanzeba":{"version":"2021-10-14"}}' > ~/.config/github-copilot/terms.json
  $nvim_path --headless +"Copilot setup" +qa

  # Initialize git fish plugin
  fish_path=$(which fish || echo $brew_path/bin/fish)
  echo "__git.init" | $fish_path

  # Change default shell to fish
  sudo chsh -s $fish_path "$(whoami)"
}

echo '🔗 Linking files.'
echo `date +"%Y-%m-%d %T"`
link_files

echo '💽 Installing software'
echo `date +"%Y-%m-%d %T"`
install_software

echo '🧰 Configuring software'
echo `date +"%Y-%m-%d %T"`
setup_software
echo '✅ Done!'
echo `date +"%Y-%m-%d %T"`
